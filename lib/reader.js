// Generated by CoffeeScript 1.6.3
var BuiltInTypes, Directives, JL, JS, Reader, coffee, fs, normalizeType, path, reader, splitNamedValue, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require("fs");

path = require("path");

_ = require("underscore");

coffee = require("coffee-script");

reader = exports;

BuiltInTypes = "Boolean\nDate\nError\nObject\nNumber\nString\nnull".split(/\s+/);

Directives = "api\n__filename\n__dirname\nhttp\nobject\nfunc\ntitle\ndesc\ninclude".split(/\s+/);

reader.readAPI = function(api, fileName) {
  var rdr, result;
  fileName = path.resolve(fileName);
  api.vlog("processing " + fileName);
  rdr = new Reader(api, fileName);
  result = rdr.read();
  if (result.title != null) {
    api.title = result.title;
  }
  if (result.desc != null) {
    api.desc = result.desc;
  }
  api.https = _.union(api.https, result.https);
  api.funcs = _.union(api.funcs, result.funcs);
  api.objects = _.union(api.objects, result.objects);
};

Reader = (function() {
  function Reader(api, fileName) {
    var name, _i, _len;
    this.api = api;
    this.result = {
      https: [],
      funcs: [],
      objects: [],
      title: void 0,
      desc: void 0
    };
    this.names = {};
    for (_i = 0, _len = BuiltInTypes.length; _i < _len; _i++) {
      name = BuiltInTypes[_i];
      this.names[name] = name;
    }
    this.__filename = path.resolve(fileName);
    this.__dirname = path.dirname(this.__filename);
  }

  Reader.prototype.read = function() {
    var args, directive, directiveFunc, directives, func, funcBody, _i, _len;
    funcBody = this.getFuncBody();
    args = _.map(Directives, function(directive) {
      return "var " + directive + " = __directives." + directive + ";\n";
    });
    funcBody = "" + (args.join('')) + "\n" + funcBody;
    func = new Function("__directives", funcBody);
    if (this.api.dumpJS) {
      this.api.log("generated JavaScript:\nfunction(__directives){\n" + funcBody + "\n}");
    }
    directives = {
      api: this.api,
      __filename: this.__filename,
      __dirname: this.__dirname
    };
    for (_i = 0, _len = Directives.length; _i < _len; _i++) {
      directive = Directives[_i];
      directiveFunc = "directive_" + directive;
      if (_.isFunction(this[directiveFunc])) {
        directives[directive] = this[directiveFunc].bind(this);
      }
    }
    func.call(this.names, directives);
    this.process_https();
    this.process_funcs();
    this.process_objects();
    return this.result;
  };

  Reader.prototype.getFuncBody = function() {
    var contents, fileName, options;
    fileName = this.__filename;
    if (!fs.existsSync(fileName)) {
      fileName = "" + fileName + ".api.coffee";
      if (!fs.existsSync(fileName)) {
        throw Error("file not found: " + this.__filename);
      }
      this.__filename = fileName;
    }
    contents = fs.readFileSync(this.__filename, "utf-8");
    options = {
      bare: true
    };
    return coffee.compile(contents, options);
  };

  Reader.prototype.process_https = function() {
    var fnResult, http, name, parm, parms, _i, _len, _ref, _ref1;
    _ref = this.result.https;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      http = _ref[_i];
      fnResult = http.fn.call(this.names, http);
      _.extend(http, fnResult);
      delete http.fn;
      if (http.parms == null) {
        http.parms = {};
      }
      parms = [];
      _ref1 = http.parms;
      for (name in _ref1) {
        parm = _ref1[name];
        parm.type = normalizeType(parm.type);
        parm.name = name;
        parms.push(parm);
      }
      http.parms = parms;
      http.response = normalizeType(http.response);
    }
  };

  Reader.prototype.process_funcs = function() {
    var fnResult, func, name, parm, parms, _i, _len, _ref, _ref1;
    _ref = this.result.funcs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      func = _ref[_i];
      fnResult = func.fn.call(this.names, func);
      _.extend(func, fnResult);
      delete func.fn;
      if (func.parms == null) {
        func.parms = {};
      }
      parms = [];
      _ref1 = func.parms;
      for (name in _ref1) {
        parm = _ref1[name];
        parm.type = normalizeType(parm.type);
        parm.name = name;
        parms.push(parm);
      }
      func.parms = parms;
      func.result = normalizeType(func.result);
    }
  };

  Reader.prototype.process_objects = function() {
    var fnResult, name, object, properties, property, _i, _len, _ref, _ref1;
    _ref = this.result.objects;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      object = _ref[_i];
      fnResult = object.fn.call(this.names, object);
      _.extend(object, fnResult);
      delete object.fn;
      properties = [];
      _ref1 = object.properties;
      for (name in _ref1) {
        property = _ref1[name];
        property.type = normalizeType(property.type);
        property.name = name;
        properties.push(property);
      }
      object.properties = properties;
    }
  };

  Reader.prototype.directive_http = function(method, uri, fn) {
    return this.result.https.push({
      definedIn: this.__filename,
      method: method,
      uri: uri,
      fn: fn
    });
  };

  Reader.prototype.directive_func = function(namedValue) {
    var name, value, _ref;
    _ref = splitNamedValue(namedValue), name = _ref.name, value = _ref.value;
    this.names[name] = name;
    return this.result.funcs.push({
      name: name,
      definedIn: this.__filename,
      isFunction: true,
      fn: value
    });
  };

  Reader.prototype.directive_object = function(namedValue) {
    var name, value, _ref;
    _ref = splitNamedValue(namedValue), name = _ref.name, value = _ref.value;
    this.names[name] = name;
    return this.result.objects.push({
      name: name,
      definedIn: this.__filename,
      isObject: true,
      fn: value
    });
  };

  Reader.prototype.directive_title = function(text) {
    return this.result.title = text;
  };

  Reader.prototype.directive_desc = function(text) {
    return this.result.desc = text;
  };

  Reader.prototype.directive_include = function(fileName) {
    var fullName, func, object, _i, _j, _len, _len1, _ref, _ref1;
    fullName = path.resolve(this.__dirname, fileName);
    reader.readAPI(this.api, fullName);
    _ref = this.api.funcs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      func = _ref[_i];
      this.names[func.name] = func.name;
    }
    _ref1 = this.api.objects;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      object = _ref1[_j];
      this.names[object.name] = object.name;
    }
  };

  return Reader;

})();

splitNamedValue = function(namedValue) {
  var name, value;
  for (name in namedValue) {
    value = namedValue[name];
    return {
      name: name,
      value: value
    };
  }
  return null;
};

normalizeType = function(value, dimensions) {
  var result;
  if (dimensions == null) {
    dimensions = 0;
  }
  if (value == null) {
    result = {
      name: "null",
      isPrim: true
    };
    return result;
  }
  if (_.isArray(value)) {
    return normalizeType(value[0], ++dimensions);
  }
  result = {};
  if (dimensions) {
    result.dimensions = dimensions;
  }
  if (_.isString(value)) {
    result.name = value;
    if (__indexOf.call(BuiltInTypes, value) >= 0) {
      result.isPrim = true;
    }
    return result;
  }
  switch (value) {
    case Boolean:
      result.name = "Boolean";
      result.isPrim = true;
      break;
    case Date:
      result.name = "Date";
      result.isPrim = true;
      break;
    case Error:
      result.name = "Error";
      result.isPrim = true;
      break;
    case Number:
      result.name = "Number";
      result.isPrim = true;
      break;
    case Object:
      result.name = "Object";
      result.isPrim = true;
      break;
    case String:
      result.name = "String";
      result.isPrim = true;
      break;
    default:
      result.name = "" + value;
  }
  return result;
};

JL = function(object) {
  return JSON.stringify(object, null, 4);
};

JS = function(object) {
  return JSON.stringify(object);
};

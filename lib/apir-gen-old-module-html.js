// Generated by CoffeeScript 1.6.3
var HTMLTemplate, Mustache, PROGRAM, augment, augmentType, augmentTypes, collectTypes, fs, markUsed, path, removeUnusedObjects, _;

fs = require("fs");

path = require("path");

_ = require("underscore");

Mustache = require('mustache');

PROGRAM = path.basename(__filename);

PROGRAM = (PROGRAM.match(/(.*)\..*/))[1];

exports.process = function(api, options) {
  var fname, html, logger, output;
  output = options.output, logger = options.logger;
  logger = logger.newLogger(PROGRAM);
  fname = "" + output + "-module.html";
  html = Mustache.render(HTMLTemplate, augment(api));
  logger.log("generating " + fname);
  return fs.writeFileSync(fname, html);
};

HTMLTemplate = "<style>\n\n    body {\n        font-size:          150%;\n    }\n\n    table {\n        font-size:          100%;\n    }\n\n    td {\n        padding-right:      0.5em;\n        vertical-align:     top;\n    }\n\n    h3, h4 { \n        margin-bottom:      0em; \n    }\n\n    .typeName {\n        font-style:         italic;\n    }\n\n    h3 {\n        background-color:   #eee;\n        padding:            0.5em 1em;\n        margin-top:         0em;\n        margin-left:        0em;\n        border-radius:      10px;\n    }\n\n    .indent { \n        margin-left:        3em;\n    }\n\n    .bordered {\n        border:             thin solid black;\n        border-radius:      10px;\n        padding:            0em 0em 0em 0em;\n        margin-bottom:      1em;\n    }\n\n</style>\n\n<title>{{title}}</title>\n\n<h1>{{title}}</h1>\n<p>{{desc}}\n\n<!-- =================================== -->\n    <div class=bordered>\n    <h3>exports</h3>\n\n    {{^exports}}\n    <p>nothing\n    {{/exports}}\n\n    {{#exports}}\n\n    <div class=indent>\n        <table>\n        {{#props}}\n            <tr>\n                <td><b>{{name}}: </b>\n                <td>{{{typeLink}}}\n                {{#desc}}<td> - {{/desc}}\n                {{^desc}}<td>   {{/desc}}\n                <td>{{desc}}\n        {{/props}}\n\n        {{^props}}\n            <tr><td>none\n        {{/props}}\n        </table>\n    </div>\n\n    {{/exports}}\n\n    </div>\n\n<!-- =================================== -->\n<h2>functions</h2>\n<div class=indent>\n\n    {{^funcs}}\n    <p>none\n    {{/funcs}}\n\n    {{#funcs}}\n    <div class=bordered>\n    <h3 id={{name}}><tt>{{name}}{{{signature}}}</tt></h3>\n\n        <div class=indent>\n            <p>{{desc}}\n\n            <h4>parameters:</h4>\n            <div class=indent>\n                <table>\n\n                {{#parms}}\n                    <tr>\n                        <td><b>{{name}}: </b>\n                        <td>{{{typeLink}}}\n                        {{#desc}}<td> - {{/desc}}\n                        {{^desc}}<td>   {{/desc}}\n                        <td>{{desc}}\n                {{/parms}}\n\n                {{^parms}}\n                    <tr><td>none\n                {{/parms}}\n\n                </table>\n            </div>\n\n            <h4>result:</h4>\n            <div class=indent>\n                <table>\n\n                {{#result}}\n                    <tr>\n                        <td>{{{typeLink}}}\n                        {{#desc}}<td> - {{/desc}}\n                        {{^desc}}<td>   {{/desc}}\n                        <td>{{desc}}\n                {{/result}}\n\n                {{^result}}\n                    <tr><td>none\n                {{/result}}\n\n                </table>\n            </div>\n\n        </div>\n    </div>\n    {{/funcs}}\n\n</div>\n\n<!-- =================================== -->\n<h2>objects</h2>\n<div class=indent>\n\n    {{#objects}}\n    <div class=bordered>\n        <h3 id={{name}}><tt>{{name}}</tt></h3>\n\n        <div class=indent>\n            <p>{{desc}}\n\n            <h4>properties:</h4>\n            <div class=indent>\n                <table>\n                {{#props}}\n                    <tr>\n                        <td><b>{{name}}: </b>\n                        <td>{{{typeLink}}}\n                        {{#desc}}<td> - {{/desc}}\n                        {{^desc}}<td>   {{/desc}}\n                        <td>{{desc}}\n                {{/props}}\n\n                {{^props}}\n                    <tr><td>none\n                {{/props}}\n                </table>\n            </div>\n\n        </div>\n    </div>\n\n    {{/objects}}\n\n</div>";

augment = function(api) {
  var exp, types;
  types = collectTypes(api);
  exp = _.find(api.objects, function(object) {
    return object.name === "exports";
  });
  if (exp == null) {
    console.log("no 'exports' object defined");
    process.exit(1);
  }
  api["exports"] = exp;
  api.objects = _.without(api.objects, exp);
  removeUnusedObjects(api, types);
  augmentTypes(api);
  return api;
};

collectTypes = function(api) {
  var func, object, types, _i, _j, _len, _len1, _ref, _ref1;
  types = {};
  _ref = api.objects;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    object = _ref[_i];
    types[object.name] = object;
  }
  _ref1 = api.funcs;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    func = _ref1[_j];
    types[func.name] = func;
  }
  return types;
};

removeUnusedObjects = function(api, types) {
  var prop, _i, _len, _ref;
  _ref = api["exports"].props;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    prop = _ref[_i];
    markUsed(types, prop.type);
  }
  api.objects = _.filter(api.objects, function(object) {
    return object.isUsed;
  });
  api.funcs = _.filter(api.funcs, function(func) {
    return func.isUsed;
  });
};

markUsed = function(types, typeName) {
  var parm, prop, type, _i, _j, _len, _len1, _ref, _ref1;
  type = types[typeName];
  if (type == null) {
    return;
  }
  if (type.isUsed) {
    return;
  }
  type.isUsed = true;
  if (type.isObject) {
    _ref = type.props;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prop = _ref[_i];
      markUsed(types, prop.type);
    }
  } else if (type.isFunction) {
    markUsed(types, type.result.type);
    _ref1 = type.parms;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      parm = _ref1[_j];
      markUsed(types, parm.type);
    }
  }
};

augmentTypes = function(api) {
  var func, object, parm, parms, prop, result, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
  _ref = api["exports"].props;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    prop = _ref[_i];
    augmentType(prop);
  }
  _ref1 = api.funcs;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    func = _ref1[_j];
    augmentType(func.result);
    _ref2 = func.parms;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      parm = _ref2[_k];
      augmentType(parm);
    }
    parms = _.map(func.parms, function(parm) {
      return parm.name;
    });
    result = func.result.typeString;
    func.signature = "(" + (parms.join(', ')) + ") -> " + result;
  }
  _ref3 = api.objects;
  for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
    object = _ref3[_l];
    _ref4 = object.props;
    for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
      prop = _ref4[_m];
      augmentType(prop);
    }
  }
};

augmentType = function(type) {
  type.typeString = type.type;
  if (type.arity) {
    type.typeString = "" + type.typeString + "[]";
  }
  if (type.isPrim) {
    type.typeLink = "<span class=typeName>" + type.typeString + "</span>";
  } else {
    type.typeLink = "<a class=typeName href='#" + type.type + "'>" + type.typeString + "</a>";
  }
};
